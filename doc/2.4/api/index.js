Index.PACKAGES = {"io.github.hamsters.jvm" : [{"name" : "io.github.hamsters.jvm.Retry", "shortDescription" : "", "object" : "io\/github\/hamsters\/jvm\/Retry$.html", "members_object" : [{"label" : "withWait", "tail" : "(maxTries: Int, waitInMilliSeconds: Int, errorFn: (String) ⇒ Unit)(fn: ⇒ T): Future[T]", "member" : "io.github.hamsters.jvm.Retry.withWait", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#withWait[T](maxTries:Int,waitInMilliSeconds:Int,errorFn:String=>Unit)(fn:=>T):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/jvm\/Retry$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/jvm\/Retry$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scala.meta.classifiers" : [], "io.github.hamsters" : [{"name" : "io.github.hamsters.Appender", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Appender.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Appender.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Appender[L1, L2, R]) ⇒ Boolean, msg: ⇒ Any): Appender[L1, L2, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Appender.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Appender[L1, L2, R]) ⇒ Boolean): Appender[L1, L2, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Appender.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Appender[L1, L2, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Appender.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Appender[L1, L2, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Appender.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Appender[L1, L2, R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Appender.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Appender[L1, L2, R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Appender.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(l1: L1, l2: L2): R", "member" : "io.github.hamsters.Appender.apply", "link" : "io\/github\/hamsters\/Appender.html#apply(l1:L1,l2:L2):R", "kind" : "def"}, {"member" : "io.github.hamsters.Appender#<init>", "error" : "unsupported entity"}, {"label" : "f", "tail" : ": (L1, L2) ⇒ R", "member" : "io.github.hamsters.Appender.f", "link" : "io\/github\/hamsters\/Appender.html#f:(L1,L2)=>R", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Appender.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Appender.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Appender.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Appender.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Appender.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Appender.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Appender.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Appender.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Appender.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Appender.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Appender.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Appender.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Appender.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Appender.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Appender.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Appender.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/Appender.html", "kind" : "case class"}, {"name" : "io.github.hamsters.Cartesian", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Cartesian.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Cartesian.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cartesian[Box]) ⇒ Boolean, msg: ⇒ Any): Cartesian[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Cartesian.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cartesian[Box]) ⇒ Boolean): Cartesian[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Cartesian.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Cartesian[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Cartesian.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Cartesian[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Cartesian.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Cartesian[Box], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Cartesian.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Cartesian[Box], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Cartesian.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Cartesian.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Cartesian.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Cartesian.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Cartesian.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Cartesian.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Cartesian.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Cartesian.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Cartesian.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Cartesian.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Cartesian.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Cartesian.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Cartesian.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Cartesian.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Cartesian.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Cartesian.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Cartesian.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Cartesian.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Cartesian.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Cartesian.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "product", "tail" : "(a: Box[A], b: Box[B]): Box[(A, B)]", "member" : "io.github.hamsters.Cartesian.product", "link" : "io\/github\/hamsters\/Cartesian.html#product[A,B](a:Box[A],b:Box[B]):Box[(A,B)]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/github\/hamsters\/Cartesian$.html", "members_object" : [{"label" : "t3x", "tail" : "(t: (Box[T], Box[T], Box[T])): Tuple3Box[Box, T]", "member" : "io.github.hamsters.Cartesian.t3x", "link" : "io\/github\/hamsters\/Cartesian$.html#t3x[Box[_],T](t:(Box[T],Box[T],Box[T])):io.github.hamsters.Cartesian.Tuple3Box[Box,T]", "kind" : "implicit def"}, {"label" : "t2x", "tail" : "(t: (Box[T], Box[T])): Tuple2Box[Box, T]", "member" : "io.github.hamsters.Cartesian.t2x", "link" : "io\/github\/hamsters\/Cartesian$.html#t2x[Box[_],T](t:(Box[T],Box[T])):io.github.hamsters.Cartesian.Tuple2Box[Box,T]", "kind" : "implicit def"}, {"label" : "Tuple3Box", "tail" : "", "member" : "io.github.hamsters.Cartesian.Tuple3Box", "link" : "io\/github\/hamsters\/Cartesian$.html#Tuple3Box[Box[_],T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Tuple2Box", "tail" : "", "member" : "io.github.hamsters.Cartesian.Tuple2Box", "link" : "io\/github\/hamsters\/Cartesian$.html#Tuple2Box[Box[_],T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "cartesianFuture", "tail" : "(ec: ExecutionContext): Cartesian[Future]", "member" : "io.github.hamsters.Cartesian.cartesianFuture", "link" : "io\/github\/hamsters\/Cartesian$.html#cartesianFuture(implicitec:scala.concurrent.ExecutionContext):io.github.hamsters.Cartesian[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "cartesianList", "tail" : "(): Cartesian[List]", "member" : "io.github.hamsters.Cartesian.cartesianList", "link" : "io\/github\/hamsters\/Cartesian$.html#cartesianList:io.github.hamsters.Cartesian[List]", "kind" : "implicit def"}, {"label" : "cartesianOption", "tail" : "(): Cartesian[Option]", "member" : "io.github.hamsters.Cartesian.cartesianOption", "link" : "io\/github\/hamsters\/Cartesian$.html#cartesianOption:io.github.hamsters.Cartesian[Option]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Cartesian$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Cartesian$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Cartesian$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Cartesian$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Cartesian$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Cartesian$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Cartesian$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Cartesian$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Cartesian$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Cartesian$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Cartesian$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Cartesian$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Cartesian$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Cartesian$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Cartesian$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Cartesian$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Cartesian$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Cartesian$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Cartesian$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/hamsters\/Cartesian.html", "kind" : "trait"}, {"name" : "io.github.hamsters.EitherT", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/EitherT.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/EitherT.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EitherT[L, R, Box]) ⇒ Boolean, msg: ⇒ Any): EitherT[L, R, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/EitherT.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EitherT[L, R, Box]) ⇒ Boolean): EitherT[L, R, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/EitherT.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EitherT[L, R, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/EitherT.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EitherT[L, R, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/EitherT.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EitherT[L, R, Box], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/EitherT.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EitherT[L, R, Box], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/EitherT.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "filterWithDefault", "tail" : "(p: (R) ⇒ Boolean, default: L)(evidence: Monad[Box]): EitherT[L, R, Box]", "member" : "io.github.hamsters.EitherT.filterWithDefault", "link" : "io\/github\/hamsters\/EitherT.html#filterWithDefault(p:R=>Boolean,default:L)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[L,R,Box]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (R) ⇒ Boolean)(evidence: Monad[Box]): EitherT[String, R, Box]", "member" : "io.github.hamsters.EitherT.withFilter", "link" : "io\/github\/hamsters\/EitherT.html#withFilter(p:R=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[String,R,Box]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (R) ⇒ Boolean)(evidence: Monad[Box]): EitherT[String, R, Box]", "member" : "io.github.hamsters.EitherT.filter", "link" : "io\/github\/hamsters\/EitherT.html#filter(p:R=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[String,R,Box]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ R2)(evidence: Monad[Box]): EitherT[L, R2, Box]", "member" : "io.github.hamsters.EitherT.map", "link" : "io\/github\/hamsters\/EitherT.html#map[R2](f:R=>R2)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[L,R2,Box]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ EitherT[L, R2, Box])(evidence: Monad[Box]): EitherT[L, R2, Box]", "member" : "io.github.hamsters.EitherT.flatMap", "link" : "io\/github\/hamsters\/EitherT.html#flatMap[R2](f:R=>io.github.hamsters.EitherT[L,R2,Box])(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[L,R2,Box]", "kind" : "def"}, {"member" : "io.github.hamsters.EitherT#<init>", "error" : "unsupported entity"}, {"label" : "wrapped", "tail" : ": Box[Either[L, R]]", "member" : "io.github.hamsters.EitherT.wrapped", "link" : "io\/github\/hamsters\/EitherT.html#wrapped:Box[Either[L,R]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/EitherT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/EitherT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/EitherT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/EitherT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/EitherT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/EitherT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/EitherT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/EitherT.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/EitherT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/EitherT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/EitherT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/EitherT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/EitherT.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/EitherT.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/EitherT.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/EitherT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/EitherT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/EitherT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/EitherT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/EitherT.html", "kind" : "class"}, {"name" : "io.github.hamsters.EmptyOptionValues", "shortDescription" : "", "object" : "io\/github\/hamsters\/EmptyOptionValues$.html", "members_object" : [{"label" : "OrEmpty", "tail" : "", "member" : "io.github.hamsters.EmptyOptionValues.OrEmpty", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#OrEmpty[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/EmptyOptionValues$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.hamsters.Enumerable", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Enumerable.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Enumerable.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Enumerable[A]) ⇒ Boolean, msg: ⇒ Any): Enumerable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Enumerable.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Enumerable[A]) ⇒ Boolean): Enumerable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Enumerable.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Enumerable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Enumerable.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Enumerable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Enumerable.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Enumerable[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Enumerable.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Enumerable[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Enumerable.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "parse", "tail" : "(s: String): Option[A]", "member" : "io.github.hamsters.Enumerable.parse", "link" : "io\/github\/hamsters\/Enumerable.html#parse(s:String):Option[A]", "kind" : "def"}, {"label" : "name", "tail" : "(a: A): String", "member" : "io.github.hamsters.Enumerable.name", "link" : "io\/github\/hamsters\/Enumerable.html#name(a:A):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Enumerable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Enumerable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Enumerable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Enumerable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Enumerable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Enumerable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Enumerable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Enumerable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Enumerable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Enumerable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Enumerable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Enumerable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Enumerable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Enumerable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Enumerable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Enumerable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Enumerable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Enumerable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Enumerable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "list", "tail" : "(): List[A]", "member" : "io.github.hamsters.Enumerable.list", "link" : "io\/github\/hamsters\/Enumerable.html#list:List[A]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "io\/github\/hamsters\/Enumerable.html", "kind" : "trait"}, {"name" : "io.github.hamsters.Enumeration", "shortDescription" : "", "object" : "io\/github\/hamsters\/Enumeration$.html", "members_object" : [{"label" : "list", "tail" : "(ev: Enumerable[A]): List[A]", "member" : "io.github.hamsters.Enumeration.list", "link" : "io\/github\/hamsters\/Enumeration$.html#list[A](implicitev:io.github.hamsters.Enumerable[A]):List[A]", "kind" : "def"}, {"label" : "parse", "tail" : "(s: String)(ev: Enumerable[_ <: A]): Option[A]", "member" : "io.github.hamsters.Enumeration.parse", "link" : "io\/github\/hamsters\/Enumeration$.html#parse[A](s:String)(implicitev:io.github.hamsters.Enumerable[_<:A]):Option[A]", "kind" : "def"}, {"label" : "name", "tail" : "(a: A)(ev: Enumerable[_ >: A]): String", "member" : "io.github.hamsters.Enumeration.name", "link" : "io\/github\/hamsters\/Enumeration$.html#name[A](a:A)(implicitev:io.github.hamsters.Enumerable[_>:A]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Enumeration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Enumeration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Enumeration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Enumeration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Enumeration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Enumeration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Enumeration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Enumeration$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Enumeration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Enumeration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Enumeration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Enumeration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Enumeration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Enumeration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Enumeration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Enumeration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Enumeration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Enumeration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Enumeration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.hamsters.Functor", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Functor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Functor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Functor[Box]) ⇒ Boolean, msg: ⇒ Any): Functor[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Functor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Functor[Box]) ⇒ Boolean): Functor[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Functor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Functor[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Functor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Functor[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Functor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Functor[Box], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Functor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Functor[Box], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Functor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Functor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Functor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Functor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Functor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Functor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Functor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Functor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Functor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Functor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Functor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Functor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Functor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Functor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Functor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Functor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Functor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Functor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Functor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Functor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "map", "tail" : "(boxA: Box[In])(f: (In) ⇒ Out): Box[Out]", "member" : "io.github.hamsters.Functor.map", "link" : "io\/github\/hamsters\/Functor.html#map[In,Out](boxA:Box[In])(f:In=>Out):Box[Out]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/github\/hamsters\/Functor$.html", "members_object" : [{"label" : "functorFuture", "tail" : "(ec: ExecutionContext): Functor[Future]", "member" : "io.github.hamsters.Functor.functorFuture", "link" : "io\/github\/hamsters\/Functor$.html#functorFuture(implicitec:scala.concurrent.ExecutionContext):io.github.hamsters.Functor[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "functorList", "tail" : ": Functor[List]", "member" : "io.github.hamsters.Functor.functorList", "link" : "io\/github\/hamsters\/Functor$.html#functorList:io.github.hamsters.Functor[List]", "kind" : "implicit val"}, {"label" : "functorOption", "tail" : ": Functor[Option]", "member" : "io.github.hamsters.Functor.functorOption", "link" : "io\/github\/hamsters\/Functor$.html#functorOption:io.github.hamsters.Functor[Option]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Functor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Functor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Functor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Functor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Functor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Functor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Functor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Functor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Functor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Functor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Functor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Functor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Functor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Functor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Functor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Functor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Functor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Functor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Functor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/hamsters\/Functor.html", "kind" : "trait"}, {"name" : "io.github.hamsters.FutureEither", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/FutureEither.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/FutureEither.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FutureEither[L, R]) ⇒ Boolean, msg: ⇒ Any): FutureEither[L, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureEither.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FutureEither[L, R]) ⇒ Boolean): FutureEither[L, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureEither.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FutureEither[L, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureEither.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FutureEither[L, R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureEither.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FutureEither[L, R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/FutureEither.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FutureEither[L, R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/FutureEither.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.FutureEither#<init>", "error" : "unsupported entity"}, {"label" : "wrapped", "tail" : ": Future[Either[L, R]]", "member" : "io.github.hamsters.FutureEither.wrapped", "link" : "io\/github\/hamsters\/FutureEither.html#wrapped:scala.concurrent.Future[Either[L,R]]", "kind" : "val"}, {"label" : "filterWithDefault", "tail" : "(p: (R) ⇒ Boolean, default: L)(evidence: Monad[Future]): EitherT[L, R, Future]", "member" : "io.github.hamsters.EitherT.filterWithDefault", "link" : "io\/github\/hamsters\/FutureEither.html#filterWithDefault(p:R=>Boolean,default:L)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[L,R,Box]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (R) ⇒ Boolean)(evidence: Monad[Future]): EitherT[String, R, Future]", "member" : "io.github.hamsters.EitherT.withFilter", "link" : "io\/github\/hamsters\/FutureEither.html#withFilter(p:R=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[String,R,Box]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (R) ⇒ Boolean)(evidence: Monad[Future]): EitherT[String, R, Future]", "member" : "io.github.hamsters.EitherT.filter", "link" : "io\/github\/hamsters\/FutureEither.html#filter(p:R=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[String,R,Box]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ R2)(evidence: Monad[Future]): EitherT[L, R2, Future]", "member" : "io.github.hamsters.EitherT.map", "link" : "io\/github\/hamsters\/FutureEither.html#map[R2](f:R=>R2)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[L,R2,Box]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ EitherT[L, R2, Future])(evidence: Monad[Future]): EitherT[L, R2, Future]", "member" : "io.github.hamsters.EitherT.flatMap", "link" : "io\/github\/hamsters\/FutureEither.html#flatMap[R2](f:R=>io.github.hamsters.EitherT[L,R2,Box])(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.EitherT[L,R2,Box]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/FutureEither.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/FutureEither.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/FutureEither.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/FutureEither.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/FutureEither.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/FutureEither.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/FutureEither.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/FutureEither.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/FutureEither.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/FutureEither.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/FutureEither.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/FutureEither.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/FutureEither.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/FutureEither.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/FutureEither.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/FutureEither.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/FutureEither.html", "kind" : "case class"}, {"name" : "io.github.hamsters.FutureOption", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/FutureOption.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/FutureOption.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FutureOption[A]) ⇒ Boolean, msg: ⇒ Any): FutureOption[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureOption.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FutureOption[A]) ⇒ Boolean): FutureOption[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureOption.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FutureOption[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureOption.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FutureOption[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/FutureOption.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FutureOption[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/FutureOption.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FutureOption[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/FutureOption.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.FutureOption#<init>", "error" : "unsupported entity"}, {"label" : "wrapped", "tail" : ": Future[Option[A]]", "member" : "io.github.hamsters.FutureOption.wrapped", "link" : "io\/github\/hamsters\/FutureOption.html#wrapped:scala.concurrent.Future[Option[A]]", "kind" : "val"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean)(evidence: Monad[Future]): OptionT[A, Future]", "member" : "io.github.hamsters.OptionT.withFilter", "link" : "io\/github\/hamsters\/FutureOption.html#withFilter(p:A=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[A,Box]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean)(evidence: Monad[Future]): OptionT[A, Future]", "member" : "io.github.hamsters.OptionT.filter", "link" : "io\/github\/hamsters\/FutureOption.html#filter(p:A=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[A,Box]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B)(evidence: Monad[Future]): OptionT[B, Future]", "member" : "io.github.hamsters.OptionT.map", "link" : "io\/github\/hamsters\/FutureOption.html#map[B](f:A=>B)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[B,Box]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ OptionT[B, Future])(evidence: Monad[Future]): OptionT[B, Future]", "member" : "io.github.hamsters.OptionT.flatMap", "link" : "io\/github\/hamsters\/FutureOption.html#flatMap[B](f:A=>io.github.hamsters.OptionT[B,Box])(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[B,Box]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/FutureOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/FutureOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/FutureOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/FutureOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/FutureOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/FutureOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/FutureOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/FutureOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/FutureOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/FutureOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/FutureOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/FutureOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/FutureOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/FutureOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/FutureOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/FutureOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/FutureOption.html", "kind" : "case class"}, {"name" : "io.github.hamsters.HCons", "shortDescription" : "", "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/HCons.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HCons[H, T]) ⇒ Boolean, msg: ⇒ Any): HCons[H, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HCons.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HCons[H, T]) ⇒ Boolean): HCons[H, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HCons.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): HCons[H, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HCons.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): HCons[H, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HCons.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (HCons[H, T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/HCons.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (HCons[H, T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/HCons.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.github.hamsters.HCons.toString", "link" : "io\/github\/hamsters\/HCons.html#toString:String", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Any) ⇒ Any): HList", "member" : "io.github.hamsters.HCons.map", "link" : "io\/github\/hamsters\/HCons.html#map(f:Any=>Any):io.github.hamsters.HList", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Any) ⇒ Boolean): HList", "member" : "io.github.hamsters.HCons.filter", "link" : "io\/github\/hamsters\/HCons.html#filter(p:Any=>Boolean):io.github.hamsters.HList", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(zero: A)(f: (A, Any) ⇒ A): A", "member" : "io.github.hamsters.HCons.foldLeft", "link" : "io\/github\/hamsters\/HCons.html#foldLeft[A](zero:A)(f:(A,Any)=>A):A", "kind" : "def"}, {"label" : "+", "tail" : "(a: A)(f: Appender[HCons[H, T], HCons[A, HNil], Plus[HCons[A, HNil]]]): HCons[H, T.Plus[HCons[A, HNil]]]", "member" : "io.github.hamsters.HCons.+", "link" : "io\/github\/hamsters\/HCons.html#+[A](a:A)(implicitf:io.github.hamsters.Appender[io.github.hamsters.HCons[H,T],io.github.hamsters.HCons[A,io.github.hamsters.HNil],HCons.this.Plus[io.github.hamsters.HCons[A,io.github.hamsters.HNil]]]):io.github.hamsters.HCons[H,T#Plus[io.github.hamsters.HCons[A,io.github.hamsters.HNil]]]", "kind" : "def"}, {"label" : "++", "tail" : "(l2: L2)(f: Appender[HCons[H, T], L2, Plus[L2]]): HCons[H, T.Plus[L2]]", "member" : "io.github.hamsters.HCons.++", "link" : "io\/github\/hamsters\/HCons.html#++[L2<:io.github.hamsters.HList](l2:L2)(implicitf:io.github.hamsters.Appender[io.github.hamsters.HCons[H,T],L2,HCons.this.Plus[L2]]):io.github.hamsters.HCons[H,T#Plus[L2]]", "kind" : "def"}, {"label" : "::", "tail" : "(a: A): HCons[A, HCons[H, T]]", "member" : "io.github.hamsters.HCons.::", "link" : "io\/github\/hamsters\/HCons.html#::[A](a:A):io.github.hamsters.HCons[A,io.github.hamsters.HCons[H,T]]", "kind" : "def"}, {"label" : "get", "tail" : "(index: Int)(arg0: ClassTag[A]): Option[A]", "member" : "io.github.hamsters.HCons.get", "link" : "io\/github\/hamsters\/HCons.html#get[A](index:Int)(implicitevidence$6:scala.reflect.ClassTag[A]):Option[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int)(arg0: ClassTag[A]): A", "member" : "io.github.hamsters.HCons.apply", "link" : "io\/github\/hamsters\/HCons.html#apply[A](index:Int)(implicitevidence$5:scala.reflect.ClassTag[A]):A", "kind" : "def"}, {"label" : "Plus", "tail" : "", "member" : "io.github.hamsters.HCons.Plus", "link" : "io\/github\/hamsters\/HCons.html#Plus[L<:io.github.hamsters.HList]=io.github.hamsters.HCons[H,T#Plus[L]]", "kind" : "type"}, {"member" : "io.github.hamsters.HCons#<init>", "error" : "unsupported entity"}, {"label" : "tail", "tail" : ": T", "member" : "io.github.hamsters.HCons.tail", "link" : "io\/github\/hamsters\/HCons.html#tail:T", "kind" : "val"}, {"label" : "head", "tail" : ": H", "member" : "io.github.hamsters.HCons.head", "link" : "io\/github\/hamsters\/HCons.html#head:H", "kind" : "val"}, {"label" : "foreach", "tail" : "(f: (Any) ⇒ Unit): Unit", "member" : "io.github.hamsters.HList.foreach", "link" : "io\/github\/hamsters\/HCons.html#foreach(f:Any=>Unit):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/HCons.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/HCons.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/HCons.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/HCons.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/HCons.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/HCons.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/HCons.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HCons.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HCons.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HCons.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/HCons.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/HCons.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/HCons.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/HCons.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/HCons.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/HCons.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/HCons.html", "kind" : "case class"}, {"name" : "io.github.hamsters.HList", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/HList.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/HList.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HList) ⇒ Boolean, msg: ⇒ Any): HList", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HList.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HList) ⇒ Boolean): HList", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HList.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): HList", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HList.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): HList", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HList.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (HList, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/HList.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (HList, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/HList.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Any) ⇒ Unit): Unit", "member" : "io.github.hamsters.HList.foreach", "link" : "io\/github\/hamsters\/HList.html#foreach(f:Any=>Unit):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/HList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/HList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/HList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/HList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/HList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/HList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/HList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/HList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/HList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/HList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/HList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/HList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/HList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/HList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/HList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/HList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (Any) ⇒ Any): HList", "member" : "io.github.hamsters.HList.map", "link" : "io\/github\/hamsters\/HList.html#map(f:Any=>Any):io.github.hamsters.HList", "kind" : "abstract def"}, {"label" : "filter", "tail" : "(p: (Any) ⇒ Boolean): HList", "member" : "io.github.hamsters.HList.filter", "link" : "io\/github\/hamsters\/HList.html#filter(p:Any=>Boolean):io.github.hamsters.HList", "kind" : "abstract def"}, {"label" : "::", "tail" : "(t: T): HList", "member" : "io.github.hamsters.HList.::", "link" : "io\/github\/hamsters\/HList.html#::[T](t:T):io.github.hamsters.HList", "kind" : "abstract def"}, {"label" : "get", "tail" : "(index: Int)(arg0: ClassTag[A]): Option[A]", "member" : "io.github.hamsters.HList.get", "link" : "io\/github\/hamsters\/HList.html#get[A](index:Int)(implicitevidence$2:scala.reflect.ClassTag[A]):Option[A]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: Int)(arg0: ClassTag[A]): A", "member" : "io.github.hamsters.HList.apply", "link" : "io\/github\/hamsters\/HList.html#apply[A](index:Int)(implicitevidence$1:scala.reflect.ClassTag[A]):A", "kind" : "abstract def"}, {"member" : "io.github.hamsters.HList.Plus", "error" : "unsupported entity"}], "shortDescription" : "", "object" : "io\/github\/hamsters\/HList$.html", "members_object" : [{"label" : "consAppender", "tail" : "(f: Appender[L1, L2, R]): Appender[HCons[T, L1], L2, HCons[T, R]]", "member" : "io.github.hamsters.HList.consAppender", "link" : "io\/github\/hamsters\/HList$.html#consAppender[T,L1<:io.github.hamsters.HList,L2<:io.github.hamsters.HList,R<:io.github.hamsters.HList](implicitf:io.github.hamsters.Appender[L1,L2,R]):io.github.hamsters.Appender[io.github.hamsters.HCons[T,L1],L2,io.github.hamsters.HCons[T,R]]", "kind" : "implicit def"}, {"label" : "nilAppender", "tail" : "(): Appender[HNil, L, L]", "member" : "io.github.hamsters.HList.nilAppender", "link" : "io\/github\/hamsters\/HList$.html#nilAppender[L<:io.github.hamsters.HList]:io.github.hamsters.Appender[io.github.hamsters.HNil,L,L]", "kind" : "implicit def"}, {"label" : "toClass", "tail" : "(value: HList)(toClass: (HList) ⇒ T): T", "member" : "io.github.hamsters.HList.toClass", "link" : "io\/github\/hamsters\/HList$.html#toClass[T](value:io.github.hamsters.HList)(implicittoClass:io.github.hamsters.HList=>T):T", "kind" : "def"}, {"label" : "toHList", "tail" : "(value: T)(toHlist: (T) ⇒ HList): HList", "member" : "io.github.hamsters.HList.toHList", "link" : "io\/github\/hamsters\/HList$.html#toHList[T](value:T)(implicittoHlist:T=>io.github.hamsters.HList):io.github.hamsters.HList", "kind" : "def"}, {"label" : "++", "tail" : "(l1: L1, l2: L2)(f: Appender[L1, L2, HList.++.L1.Plus[L2]]): HList.++.L1.Plus[L2]", "member" : "io.github.hamsters.HList.++", "link" : "io\/github\/hamsters\/HList$.html#++[L1<:io.github.hamsters.HList,L2<:io.github.hamsters.HList](l1:L1,l2:L2)(implicitf:io.github.hamsters.Appender[L1,L2,L1#Plus[L2]]):L1#Plus[L2]", "kind" : "def"}, {"label" : "::", "tail" : "", "member" : "io.github.hamsters.HList.::", "link" : "io\/github\/hamsters\/HList$.html#::[H,T<:io.github.hamsters.HList]=io.github.hamsters.HCons[H,T]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/HList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/HList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/HList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/HList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/HList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/HList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/HList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/HList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/HList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/HList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/HList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/HList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/HList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/HList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/HList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/HList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/hamsters\/HList.html", "kind" : "trait"}, {"name" : "io.github.hamsters.HNil", "shortDescription" : "", "object" : "io\/github\/hamsters\/HNil$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/HNil.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/HNil.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HNil) ⇒ Boolean, msg: ⇒ Any): HNil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HNil.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HNil) ⇒ Boolean): HNil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HNil.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): HNil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HNil.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): HNil", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/HNil.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (HNil, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/HNil.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (HNil, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/HNil.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.github.hamsters.HNil.toString", "link" : "io\/github\/hamsters\/HNil.html#toString:String", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Any) ⇒ Any): HNil.type", "member" : "io.github.hamsters.HNil.map", "link" : "io\/github\/hamsters\/HNil.html#map(f:Any=>Any):io.github.hamsters.HNil.type", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Any) ⇒ Boolean): HNil.type", "member" : "io.github.hamsters.HNil.filter", "link" : "io\/github\/hamsters\/HNil.html#filter(p:Any=>Boolean):io.github.hamsters.HNil.type", "kind" : "def"}, {"label" : "::", "tail" : "(h: H): HCons[H, HNil]", "member" : "io.github.hamsters.HNil.::", "link" : "io\/github\/hamsters\/HNil.html#::[H](h:H):io.github.hamsters.HCons[H,io.github.hamsters.HNil]", "kind" : "def"}, {"label" : "get", "tail" : "(index: Int)(arg0: ClassTag[A]): None.type", "member" : "io.github.hamsters.HNil.get", "link" : "io\/github\/hamsters\/HNil.html#get[A](index:Int)(implicitevidence$4:scala.reflect.ClassTag[A]):None.type", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int)(arg0: ClassTag[A]): Nothing", "member" : "io.github.hamsters.HNil.apply", "link" : "io\/github\/hamsters\/HNil.html#apply[A](index:Int)(implicitevidence$3:scala.reflect.ClassTag[A]):Nothing", "kind" : "def"}, {"label" : "Plus", "tail" : "", "member" : "io.github.hamsters.HNil.Plus", "link" : "io\/github\/hamsters\/HNil.html#Plus[L<:io.github.hamsters.HList]=L", "kind" : "type"}, {"member" : "io.github.hamsters.HNil#<init>", "error" : "unsupported entity"}, {"label" : "foreach", "tail" : "(f: (Any) ⇒ Unit): Unit", "member" : "io.github.hamsters.HList.foreach", "link" : "io\/github\/hamsters\/HNil.html#foreach(f:Any=>Unit):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/HNil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/HNil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/HNil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/HNil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/HNil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/HNil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/HNil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HNil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HNil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HNil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/HNil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/HNil.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/HNil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/HNil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/HNil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/HNil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/HNil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/HNil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "io.github.hamsters.HNil.toString", "link" : "io\/github\/hamsters\/HNil$.html#toString:String", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Any) ⇒ Any): HNil.type", "member" : "io.github.hamsters.HNil.map", "link" : "io\/github\/hamsters\/HNil$.html#map(f:Any=>Any):io.github.hamsters.HNil.type", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Any) ⇒ Boolean): HNil.type", "member" : "io.github.hamsters.HNil.filter", "link" : "io\/github\/hamsters\/HNil$.html#filter(p:Any=>Boolean):io.github.hamsters.HNil.type", "kind" : "def"}, {"label" : "::", "tail" : "(h: H): HCons[H, HNil]", "member" : "io.github.hamsters.HNil.::", "link" : "io\/github\/hamsters\/HNil$.html#::[H](h:H):io.github.hamsters.HCons[H,io.github.hamsters.HNil]", "kind" : "def"}, {"label" : "get", "tail" : "(index: Int)(arg0: ClassTag[A]): None.type", "member" : "io.github.hamsters.HNil.get", "link" : "io\/github\/hamsters\/HNil$.html#get[A](index:Int)(implicitevidence$4:scala.reflect.ClassTag[A]):None.type", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int)(arg0: ClassTag[A]): Nothing", "member" : "io.github.hamsters.HNil.apply", "link" : "io\/github\/hamsters\/HNil$.html#apply[A](index:Int)(implicitevidence$3:scala.reflect.ClassTag[A]):Nothing", "kind" : "def"}, {"label" : "Plus", "tail" : "", "member" : "io.github.hamsters.HNil.Plus", "link" : "io\/github\/hamsters\/HNil$.html#Plus[L<:io.github.hamsters.HList]=L", "kind" : "type"}, {"label" : "foreach", "tail" : "(f: (Any) ⇒ Unit): Unit", "member" : "io.github.hamsters.HList.foreach", "link" : "io\/github\/hamsters\/HNil$.html#foreach(f:Any=>Unit):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/HNil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/HNil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/HNil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/HNil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/HNil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/HNil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/HNil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HNil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HNil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/HNil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/HNil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/HNil$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/HNil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/HNil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/HNil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/HNil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/HNil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/HNil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/HNil.html", "kind" : "class"}, {"name" : "io.github.hamsters.Monad", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Monad.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Monad.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Monad[Box]) ⇒ Boolean, msg: ⇒ Any): Monad[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monad.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Monad[Box]) ⇒ Boolean): Monad[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monad.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Monad[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monad.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Monad[Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monad.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Monad[Box], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Monad.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Monad[Box], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Monad.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Monad.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Monad.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Monad.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Monad.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Monad.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Monad.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Monad.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monad.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monad.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monad.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Monad.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Monad.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Monad.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Monad.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Monad.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Monad.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Monad.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Monad.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Monad.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(boxA: Box[A])(f: (A) ⇒ Box[B]): Box[B]", "member" : "io.github.hamsters.Monad.flatMap", "link" : "io\/github\/hamsters\/Monad.html#flatMap[A,B](boxA:Box[A])(f:A=>Box[B]):Box[B]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(a: A): Box[A]", "member" : "io.github.hamsters.Monad.pure", "link" : "io\/github\/hamsters\/Monad.html#pure[A](a:A):Box[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(boxA: Box[In])(f: (In) ⇒ Out): Box[Out]", "member" : "io.github.hamsters.Functor.map", "link" : "io\/github\/hamsters\/Monad.html#map[In,Out](boxA:Box[In])(f:In=>Out):Box[Out]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/github\/hamsters\/Monad$.html", "members_object" : [{"label" : "futureMonad", "tail" : "(ec: ExecutionContext): Monad[Future]", "member" : "io.github.hamsters.Monad.futureMonad", "link" : "io\/github\/hamsters\/Monad$.html#futureMonad(implicitec:scala.concurrent.ExecutionContext):io.github.hamsters.Monad[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "optionMonad", "tail" : ": Monad[Option]", "member" : "io.github.hamsters.Monad.optionMonad", "link" : "io\/github\/hamsters\/Monad$.html#optionMonad:io.github.hamsters.Monad[Option]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Monad$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Monad$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Monad$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Monad$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Monad$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Monad$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Monad$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monad$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monad$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monad$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Monad$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Monad$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Monad$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Monad$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Monad$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Monad$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Monad$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Monad$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Monad$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/hamsters\/Monad.html", "kind" : "trait"}, {"name" : "io.github.hamsters.MonadTransformers", "shortDescription" : "", "object" : "io\/github\/hamsters\/MonadTransformers$.html", "members_object" : [{"label" : "futureEitherToFuture", "tail" : "(fe: FutureEither[L, R]): Future[Either[L, R]]", "member" : "io.github.hamsters.MonadTransformers.futureEitherToFuture", "link" : "io\/github\/hamsters\/MonadTransformers$.html#futureEitherToFuture[L,R](fe:io.github.hamsters.FutureEither[L,R]):scala.concurrent.Future[Either[L,R]]", "kind" : "implicit def"}, {"label" : "futureOptionToFuture", "tail" : "(fo: FutureOption[A]): Future[Option[A]]", "member" : "io.github.hamsters.MonadTransformers.futureOptionToFuture", "link" : "io\/github\/hamsters\/MonadTransformers$.html#futureOptionToFuture[A](fo:io.github.hamsters.FutureOption[A]):scala.concurrent.Future[Option[A]]", "kind" : "implicit def"}, {"label" : "eitherTToT", "tail" : "(eitherT: EitherT[L, R, Box]): Box[Either[L, R]]", "member" : "io.github.hamsters.MonadTransformers.eitherTToT", "link" : "io\/github\/hamsters\/MonadTransformers$.html#eitherTToT[L,R,Box[_]](eitherT:io.github.hamsters.EitherT[L,R,Box]):Box[Either[L,R]]", "kind" : "implicit def"}, {"label" : "optionTToT", "tail" : "(optionT: OptionT[A, Box]): Box[Option[A]]", "member" : "io.github.hamsters.MonadTransformers.optionTToT", "link" : "io\/github\/hamsters\/MonadTransformers$.html#optionTToT[A,Box[_]](optionT:io.github.hamsters.OptionT[A,Box]):Box[Option[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/MonadTransformers$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/MonadTransformers$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/MonadTransformers$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/MonadTransformers$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/MonadTransformers$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/MonadTransformers$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/MonadTransformers$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/MonadTransformers$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/MonadTransformers$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/MonadTransformers$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/MonadTransformers$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/MonadTransformers$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/MonadTransformers$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/MonadTransformers$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/MonadTransformers$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/MonadTransformers$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/MonadTransformers$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/MonadTransformers$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/MonadTransformers$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.hamsters.Monoid", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Monoid.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Monoid.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Monoid[T]) ⇒ Boolean, msg: ⇒ Any): Monoid[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monoid.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Monoid[T]) ⇒ Boolean): Monoid[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monoid.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Monoid[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monoid.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Monoid[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Monoid.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Monoid[T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Monoid.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Monoid[T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Monoid.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Monoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Monoid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Monoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Monoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Monoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Monoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Monoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monoid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Monoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Monoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Monoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Monoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Monoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Monoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Monoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Monoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Monoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compose", "tail" : "(l: T, r: T): T", "member" : "io.github.hamsters.Monoid.compose", "link" : "io\/github\/hamsters\/Monoid.html#compose(l:T,r:T):T", "kind" : "abstract def"}, {"label" : "empty", "tail" : "(): T", "member" : "io.github.hamsters.Monoid.empty", "link" : "io\/github\/hamsters\/Monoid.html#empty:T", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/github\/hamsters\/Monoid$.html", "members_object" : [{"label" : "optionMonoid", "tail" : "(): Monoid[Option[T]]", "member" : "io.github.hamsters.Monoid.optionMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#optionMonoid[T]:io.github.hamsters.Monoid[Option[T]]", "kind" : "implicit def"}, {"label" : "seqMonoid", "tail" : "(): Monoid[Seq[T]]", "member" : "io.github.hamsters.Monoid.seqMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#seqMonoid[T]:io.github.hamsters.Monoid[Seq[T]]", "kind" : "implicit def"}, {"label" : "listMonoid", "tail" : "(): Monoid[List[T]]", "member" : "io.github.hamsters.Monoid.listMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#listMonoid[T]:io.github.hamsters.Monoid[List[T]]", "kind" : "implicit def"}, {"label" : "stringMonoid", "tail" : ": Monoid[String]", "member" : "io.github.hamsters.Monoid.stringMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#stringMonoid:io.github.hamsters.Monoid[String]", "kind" : "implicit val"}, {"label" : "doubleMonoid", "tail" : ": Monoid[Double]", "member" : "io.github.hamsters.Monoid.doubleMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#doubleMonoid:io.github.hamsters.Monoid[Double]", "kind" : "implicit val"}, {"label" : "floatMonoid", "tail" : ": Monoid[Float]", "member" : "io.github.hamsters.Monoid.floatMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#floatMonoid:io.github.hamsters.Monoid[Float]", "kind" : "implicit val"}, {"label" : "bigDecimalMonoid", "tail" : ": Monoid[BigDecimal]", "member" : "io.github.hamsters.Monoid.bigDecimalMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#bigDecimalMonoid:io.github.hamsters.Monoid[BigDecimal]", "kind" : "implicit val"}, {"label" : "intMonoid", "tail" : ": Monoid[Int]", "member" : "io.github.hamsters.Monoid.intMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#intMonoid:io.github.hamsters.Monoid[Int]", "kind" : "implicit val"}, {"label" : "booleanMonoid", "tail" : ": Monoid[Boolean]", "member" : "io.github.hamsters.Monoid.booleanMonoid", "link" : "io\/github\/hamsters\/Monoid$.html#booleanMonoid:io.github.hamsters.Monoid[Boolean]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Monoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Monoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Monoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Monoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Monoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Monoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Monoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Monoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Monoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Monoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Monoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Monoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Monoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Monoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Monoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Monoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Monoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/hamsters\/Monoid.html", "kind" : "trait"}, {"name" : "io.github.hamsters.NonEmptyList", "shortDescription" : "", "object" : "io\/github\/hamsters\/NonEmptyList$.html", "members_object" : [{"label" : "apply", "tail" : "(head: A, tail: A*): NonEmptyList[A]", "member" : "io.github.hamsters.NonEmptyList.apply", "link" : "io\/github\/hamsters\/NonEmptyList$.html#apply[A](head:A,tail:A*):io.github.hamsters.NonEmptyList[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/NonEmptyList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/NonEmptyList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/NonEmptyList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/NonEmptyList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/NonEmptyList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/NonEmptyList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/NonEmptyList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/NonEmptyList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/NonEmptyList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/NonEmptyList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/NonEmptyList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/NonEmptyList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/NonEmptyList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/NonEmptyList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/NonEmptyList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/NonEmptyList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/NonEmptyList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/NonEmptyList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/NonEmptyList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/NonEmptyList.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/NonEmptyList.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NonEmptyList[A]) ⇒ Boolean, msg: ⇒ Any): NonEmptyList[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/NonEmptyList.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NonEmptyList[A]) ⇒ Boolean): NonEmptyList[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/NonEmptyList.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): NonEmptyList[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/NonEmptyList.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NonEmptyList[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/NonEmptyList.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NonEmptyList[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/NonEmptyList.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NonEmptyList[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/NonEmptyList.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "io.github.hamsters.NonEmptyList.toList", "link" : "io\/github\/hamsters\/NonEmptyList.html#toList:List[A]", "kind" : "def"}, {"member" : "io.github.hamsters.NonEmptyList#<init>", "error" : "unsupported entity"}, {"label" : "tail", "tail" : ": List[A]", "member" : "io.github.hamsters.NonEmptyList.tail", "link" : "io\/github\/hamsters\/NonEmptyList.html#tail:List[A]", "kind" : "val"}, {"label" : "head", "tail" : ": A", "member" : "io.github.hamsters.NonEmptyList.head", "link" : "io\/github\/hamsters\/NonEmptyList.html#head:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/NonEmptyList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/NonEmptyList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/NonEmptyList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/NonEmptyList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/NonEmptyList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/NonEmptyList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/NonEmptyList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/NonEmptyList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/NonEmptyList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/NonEmptyList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/NonEmptyList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/NonEmptyList.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/NonEmptyList.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/NonEmptyList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/NonEmptyList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/NonEmptyList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/NonEmptyList.html", "kind" : "case class"}, {"name" : "io.github.hamsters.OptionT", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/OptionT.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/OptionT.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptionT[A, Box]) ⇒ Boolean, msg: ⇒ Any): OptionT[A, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/OptionT.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptionT[A, Box]) ⇒ Boolean): OptionT[A, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/OptionT.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): OptionT[A, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/OptionT.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OptionT[A, Box]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/OptionT.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OptionT[A, Box], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/OptionT.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OptionT[A, Box], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/OptionT.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean)(evidence: Monad[Box]): OptionT[A, Box]", "member" : "io.github.hamsters.OptionT.withFilter", "link" : "io\/github\/hamsters\/OptionT.html#withFilter(p:A=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[A,Box]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean)(evidence: Monad[Box]): OptionT[A, Box]", "member" : "io.github.hamsters.OptionT.filter", "link" : "io\/github\/hamsters\/OptionT.html#filter(p:A=>Boolean)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[A,Box]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B)(evidence: Monad[Box]): OptionT[B, Box]", "member" : "io.github.hamsters.OptionT.map", "link" : "io\/github\/hamsters\/OptionT.html#map[B](f:A=>B)(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[B,Box]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ OptionT[B, Box])(evidence: Monad[Box]): OptionT[B, Box]", "member" : "io.github.hamsters.OptionT.flatMap", "link" : "io\/github\/hamsters\/OptionT.html#flatMap[B](f:A=>io.github.hamsters.OptionT[B,Box])(implicitevidence:io.github.hamsters.Monad[Box]):io.github.hamsters.OptionT[B,Box]", "kind" : "def"}, {"member" : "io.github.hamsters.OptionT#<init>", "error" : "unsupported entity"}, {"label" : "wrapped", "tail" : ": Box[Option[A]]", "member" : "io.github.hamsters.OptionT.wrapped", "link" : "io\/github\/hamsters\/OptionT.html#wrapped:Box[Option[A]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/OptionT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/OptionT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/OptionT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/OptionT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/OptionT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/OptionT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/OptionT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/OptionT.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/OptionT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/OptionT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/OptionT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/OptionT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/OptionT.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/OptionT.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/OptionT.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/OptionT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/OptionT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/OptionT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/OptionT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/OptionT.html", "kind" : "class"}, {"name" : "io.github.hamsters.Retry", "shortDescription" : "", "object" : "io\/github\/hamsters\/Retry$.html", "members_object" : [{"label" : "fromTry", "tail" : "(maxTries: Int, errorFn: (String) ⇒ Unit)(fn: ⇒ Try[T]): Try[T]", "member" : "io.github.hamsters.Retry.fromTry", "link" : "io\/github\/hamsters\/Retry$.html#fromTry[T](maxTries:Int,errorFn:String=>Unit)(fn:=>scala.util.Try[T]):scala.util.Try[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(maxTries: Int, errorFn: (String) ⇒ Unit)(fn: ⇒ T): Try[T]", "member" : "io.github.hamsters.Retry.apply", "link" : "io\/github\/hamsters\/Retry$.html#apply[T](maxTries:Int,errorFn:String=>Unit)(fn:=>T):scala.util.Try[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Retry$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Retry$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Retry$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Retry$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Retry$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Retry$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Retry$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Retry$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Retry$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Retry$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Retry$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Retry$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Retry$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Retry$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Retry$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Retry$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Retry$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Retry$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Retry$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.hamsters.Semigroup", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Semigroup.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Semigroup.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Semigroup[T]) ⇒ Boolean, msg: ⇒ Any): Semigroup[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Semigroup.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Semigroup[T]) ⇒ Boolean): Semigroup[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Semigroup.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Semigroup[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Semigroup.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Semigroup[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Semigroup.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Semigroup[T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Semigroup.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Semigroup[T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Semigroup.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Semigroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Semigroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Semigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Semigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Semigroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Semigroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Semigroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Semigroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Semigroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Semigroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Semigroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Semigroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Semigroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Semigroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Semigroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Semigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Semigroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Semigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Semigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(a: T, b: T): T", "member" : "io.github.hamsters.Semigroup.combine", "link" : "io\/github\/hamsters\/Semigroup.html#combine(a:T,b:T):T", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/github\/hamsters\/Semigroup$.html", "members_object" : [{"label" : "semigroupalOption", "tail" : "(semigroup: Semigroup[T]): Semigroup[Option[T]]", "member" : "io.github.hamsters.Semigroup.semigroupalOption", "link" : "io\/github\/hamsters\/Semigroup$.html#semigroupalOption[T](implicitsemigroup:io.github.hamsters.Semigroup[T]):io.github.hamsters.Semigroup[Option[T]]", "kind" : "implicit def"}, {"label" : "semigroupalList", "tail" : "(): Semigroup[List[T]]", "member" : "io.github.hamsters.Semigroup.semigroupalList", "link" : "io\/github\/hamsters\/Semigroup$.html#semigroupalList[T]:io.github.hamsters.Semigroup[List[T]]", "kind" : "implicit def"}, {"label" : "semigroupalSeq", "tail" : "(): Semigroup[Seq[T]]", "member" : "io.github.hamsters.Semigroup.semigroupalSeq", "link" : "io\/github\/hamsters\/Semigroup$.html#semigroupalSeq[T]:io.github.hamsters.Semigroup[Seq[T]]", "kind" : "implicit def"}, {"label" : "semigroupalString", "tail" : ": Semigroup[String]", "member" : "io.github.hamsters.Semigroup.semigroupalString", "link" : "io\/github\/hamsters\/Semigroup$.html#semigroupalString:io.github.hamsters.Semigroup[String]", "kind" : "implicit val"}, {"label" : "semigroupalInt", "tail" : ": Semigroup[Int]", "member" : "io.github.hamsters.Semigroup.semigroupalInt", "link" : "io\/github\/hamsters\/Semigroup$.html#semigroupalInt:io.github.hamsters.Semigroup[Int]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Semigroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Semigroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Semigroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Semigroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Semigroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Semigroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Semigroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Semigroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Semigroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Semigroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Semigroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Semigroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Semigroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Semigroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Semigroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Semigroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Semigroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Semigroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Semigroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/hamsters\/Semigroup.html", "kind" : "trait"}, {"name" : "io.github.hamsters.Show", "shortDescription" : "", "object" : "io\/github\/hamsters\/Show$.html", "members_object" : [{"label" : "show", "tail" : "(value: A)(s: Showable[A]): String", "member" : "io.github.hamsters.Show.show", "link" : "io\/github\/hamsters\/Show$.html#show[A](value:A)(implicits:io.github.hamsters.Showable[A]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Show$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Show$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Show$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Show$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Show$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Show$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Show$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Show$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Show$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Show$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Show$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Show$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Show$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Show$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Show$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Show$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Show$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Show$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Show$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.hamsters.Showable", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Showable.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Showable.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Showable[A]) ⇒ Boolean, msg: ⇒ Any): Showable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Showable.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Showable[A]) ⇒ Boolean): Showable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Showable.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Showable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Showable.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Showable[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Showable.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Showable[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Showable.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Showable[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Showable.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Showable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Showable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Showable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Showable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Showable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Showable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Showable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Showable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Showable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Showable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Showable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Showable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Showable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Showable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Showable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Showable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Showable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Showable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Showable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "format", "tail" : "(value: A): String", "member" : "io.github.hamsters.Showable.format", "link" : "io\/github\/hamsters\/Showable.html#format(value:A):String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/github\/hamsters\/Showable$.html", "members_object" : [{"label" : "showClass", "tail" : "(): Showable[Class[T]]", "member" : "io.github.hamsters.Showable.showClass", "link" : "io\/github\/hamsters\/Showable$.html#showClass[T]:io.github.hamsters.Showable[Class[T]]", "kind" : "implicit def"}, {"label" : "unitShowable", "tail" : ": Showable[Unit]", "member" : "io.github.hamsters.Showable.unitShowable", "link" : "io\/github\/hamsters\/Showable$.html#unitShowable:io.github.hamsters.Showable[Unit]", "kind" : "implicit val"}, {"label" : "shortShowable", "tail" : ": Showable[Short]", "member" : "io.github.hamsters.Showable.shortShowable", "link" : "io\/github\/hamsters\/Showable$.html#shortShowable:io.github.hamsters.Showable[Short]", "kind" : "implicit val"}, {"label" : "byteShowable", "tail" : ": Showable[Byte]", "member" : "io.github.hamsters.Showable.byteShowable", "link" : "io\/github\/hamsters\/Showable$.html#byteShowable:io.github.hamsters.Showable[Byte]", "kind" : "implicit val"}, {"label" : "booleanShowable", "tail" : ": Showable[Boolean]", "member" : "io.github.hamsters.Showable.booleanShowable", "link" : "io\/github\/hamsters\/Showable$.html#booleanShowable:io.github.hamsters.Showable[Boolean]", "kind" : "implicit val"}, {"label" : "jdkDateShowable", "tail" : ": Showable[Date]", "member" : "io.github.hamsters.Showable.jdkDateShowable", "link" : "io\/github\/hamsters\/Showable$.html#jdkDateShowable:io.github.hamsters.Showable[java.util.Date]", "kind" : "implicit val"}, {"label" : "longShowable", "tail" : ": Showable[Long]", "member" : "io.github.hamsters.Showable.longShowable", "link" : "io\/github\/hamsters\/Showable$.html#longShowable:io.github.hamsters.Showable[Long]", "kind" : "implicit val"}, {"label" : "floatShowable", "tail" : ": Showable[Float]", "member" : "io.github.hamsters.Showable.floatShowable", "link" : "io\/github\/hamsters\/Showable$.html#floatShowable:io.github.hamsters.Showable[Float]", "kind" : "implicit val"}, {"label" : "doubleShowable", "tail" : ": Showable[Double]", "member" : "io.github.hamsters.Showable.doubleShowable", "link" : "io\/github\/hamsters\/Showable$.html#doubleShowable:io.github.hamsters.Showable[Double]", "kind" : "implicit val"}, {"label" : "charShowable", "tail" : ": Showable[Char]", "member" : "io.github.hamsters.Showable.charShowable", "link" : "io\/github\/hamsters\/Showable$.html#charShowable:io.github.hamsters.Showable[Char]", "kind" : "implicit val"}, {"label" : "intShowable", "tail" : ": Showable[Int]", "member" : "io.github.hamsters.Showable.intShowable", "link" : "io\/github\/hamsters\/Showable$.html#intShowable:io.github.hamsters.Showable[Int]", "kind" : "implicit val"}, {"label" : "stringShowable", "tail" : ": Showable[String]", "member" : "io.github.hamsters.Showable.stringShowable", "link" : "io\/github\/hamsters\/Showable$.html#stringShowable:io.github.hamsters.Showable[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Showable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Showable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Showable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Showable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Showable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Showable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Showable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Showable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Showable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Showable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Showable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Showable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Showable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Showable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Showable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Showable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Showable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Showable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Showable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/hamsters\/Showable.html", "kind" : "trait"}, {"name" : "io.github.hamsters.ShowableSyntax", "shortDescription" : "", "object" : "io\/github\/hamsters\/ShowableSyntax$.html", "members_object" : [{"label" : "ShowableOps", "tail" : "", "member" : "io.github.hamsters.ShowableSyntax.ShowableOps", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#ShowableOps[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/ShowableSyntax$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/ShowableSyntax$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.hamsters.Union", "members_trait" : [{"label" : "noEraseInstanceOf", "tail" : "(arg0: ClassTag[T]): Boolean", "member" : "io.github.hamsters.Union.NoEraseInstanceOf.noEraseInstanceOf", "link" : "io\/github\/hamsters\/Union.html#noEraseInstanceOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union) ⇒ Boolean, msg: ⇒ Any): Union", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union) ⇒ Boolean): Union", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(default: T)(arg0: ClassTag[T]): T", "member" : "io.github.hamsters.Union.getOrElse", "link" : "io\/github\/hamsters\/Union.html#getOrElse[T](default:T)(implicitevidence$4:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: ClassTag[T]): Option[T]", "member" : "io.github.hamsters.Union.get", "link" : "io\/github\/hamsters\/Union.html#get[T](implicitevidence$3:scala.reflect.ClassTag[T]):Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Union.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Union.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Union.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/github\/hamsters\/Union.html", "kind" : "trait"}, {"name" : "io.github.hamsters.Union2", "shortDescription" : "", "members_case class" : [{"label" : "noEraseInstanceOf", "tail" : "(arg0: ClassTag[T]): Boolean", "member" : "io.github.hamsters.Union.NoEraseInstanceOf.noEraseInstanceOf", "link" : "io\/github\/hamsters\/Union2.html#noEraseInstanceOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union2.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union2.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union2[T1, T2]) ⇒ Boolean, msg: ⇒ Any): Union2[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union2[T1, T2]) ⇒ Boolean): Union2[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union2[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union2[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union2[T1, T2], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union2.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union2[T1, T2], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union2.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union2#<init>", "error" : "unsupported entity"}, {"label" : "v2", "tail" : ": Option[T2]", "member" : "io.github.hamsters.Union2.v2", "link" : "io\/github\/hamsters\/Union2.html#v2:Option[T2]", "kind" : "val"}, {"label" : "v1", "tail" : ": Option[T1]", "member" : "io.github.hamsters.Union2.v1", "link" : "io\/github\/hamsters\/Union2.html#v1:Option[T1]", "kind" : "val"}, {"label" : "getOrElse", "tail" : "(default: T)(arg0: ClassTag[T]): T", "member" : "io.github.hamsters.Union.getOrElse", "link" : "io\/github\/hamsters\/Union2.html#getOrElse[T](default:T)(implicitevidence$4:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: ClassTag[T]): Option[T]", "member" : "io.github.hamsters.Union.get", "link" : "io\/github\/hamsters\/Union2.html#get[T](implicitevidence$3:scala.reflect.ClassTag[T]):Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union2.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union2.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/Union2.html", "kind" : "case class"}, {"name" : "io.github.hamsters.Union2Type", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union2Type.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union2Type.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union2Type[T1, T2]) ⇒ Boolean, msg: ⇒ Any): Union2Type[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2Type.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union2Type[T1, T2]) ⇒ Boolean): Union2Type[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2Type.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union2Type[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2Type.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union2Type[T1, T2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union2Type.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union2Type[T1, T2], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union2Type.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union2Type[T1, T2], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union2Type.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union2Type#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union2Type.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union2Type.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union2Type.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union2Type.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union2Type.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union2Type.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union2Type.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union2Type.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union2Type.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union2Type.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union2Type.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union2Type.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Union2Type.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union2Type.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Union2Type.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Union2Type.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union2Type.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union2Type.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union2Type.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/Union2Type.html", "kind" : "class"}, {"name" : "io.github.hamsters.Union3", "shortDescription" : "", "members_case class" : [{"label" : "noEraseInstanceOf", "tail" : "(arg0: ClassTag[T]): Boolean", "member" : "io.github.hamsters.Union.NoEraseInstanceOf.noEraseInstanceOf", "link" : "io\/github\/hamsters\/Union3.html#noEraseInstanceOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union3.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union3.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union3[T1, T2, T3]) ⇒ Boolean, msg: ⇒ Any): Union3[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union3[T1, T2, T3]) ⇒ Boolean): Union3[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union3[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union3[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union3[T1, T2, T3], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union3.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union3[T1, T2, T3], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union3.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union3#<init>", "error" : "unsupported entity"}, {"label" : "v3", "tail" : ": Option[T3]", "member" : "io.github.hamsters.Union3.v3", "link" : "io\/github\/hamsters\/Union3.html#v3:Option[T3]", "kind" : "val"}, {"label" : "v2", "tail" : ": Option[T2]", "member" : "io.github.hamsters.Union3.v2", "link" : "io\/github\/hamsters\/Union3.html#v2:Option[T2]", "kind" : "val"}, {"label" : "v1", "tail" : ": Option[T1]", "member" : "io.github.hamsters.Union3.v1", "link" : "io\/github\/hamsters\/Union3.html#v1:Option[T1]", "kind" : "val"}, {"label" : "getOrElse", "tail" : "(default: T)(arg0: ClassTag[T]): T", "member" : "io.github.hamsters.Union.getOrElse", "link" : "io\/github\/hamsters\/Union3.html#getOrElse[T](default:T)(implicitevidence$4:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: ClassTag[T]): Option[T]", "member" : "io.github.hamsters.Union.get", "link" : "io\/github\/hamsters\/Union3.html#get[T](implicitevidence$3:scala.reflect.ClassTag[T]):Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union3.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union3.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union3.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/Union3.html", "kind" : "case class"}, {"name" : "io.github.hamsters.Union3Type", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union3Type.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union3Type.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union3Type[T1, T2, T3]) ⇒ Boolean, msg: ⇒ Any): Union3Type[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3Type.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union3Type[T1, T2, T3]) ⇒ Boolean): Union3Type[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3Type.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union3Type[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3Type.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union3Type[T1, T2, T3]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union3Type.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union3Type[T1, T2, T3], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union3Type.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union3Type[T1, T2, T3], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union3Type.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union3Type#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union3Type.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union3Type.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union3Type.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union3Type.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union3Type.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union3Type.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union3Type.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union3Type.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union3Type.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union3Type.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union3Type.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union3Type.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Union3Type.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union3Type.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Union3Type.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Union3Type.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union3Type.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union3Type.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union3Type.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/Union3Type.html", "kind" : "class"}, {"name" : "io.github.hamsters.Union4", "shortDescription" : "", "members_case class" : [{"label" : "noEraseInstanceOf", "tail" : "(arg0: ClassTag[T]): Boolean", "member" : "io.github.hamsters.Union.NoEraseInstanceOf.noEraseInstanceOf", "link" : "io\/github\/hamsters\/Union4.html#noEraseInstanceOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union4.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union4.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union4[T1, T2, T3, T4]) ⇒ Boolean, msg: ⇒ Any): Union4[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union4[T1, T2, T3, T4]) ⇒ Boolean): Union4[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union4[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union4[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union4[T1, T2, T3, T4], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union4.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union4[T1, T2, T3, T4], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union4.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union4#<init>", "error" : "unsupported entity"}, {"label" : "v4", "tail" : ": Option[T4]", "member" : "io.github.hamsters.Union4.v4", "link" : "io\/github\/hamsters\/Union4.html#v4:Option[T4]", "kind" : "val"}, {"label" : "v3", "tail" : ": Option[T3]", "member" : "io.github.hamsters.Union4.v3", "link" : "io\/github\/hamsters\/Union4.html#v3:Option[T3]", "kind" : "val"}, {"label" : "v2", "tail" : ": Option[T2]", "member" : "io.github.hamsters.Union4.v2", "link" : "io\/github\/hamsters\/Union4.html#v2:Option[T2]", "kind" : "val"}, {"label" : "v1", "tail" : ": Option[T1]", "member" : "io.github.hamsters.Union4.v1", "link" : "io\/github\/hamsters\/Union4.html#v1:Option[T1]", "kind" : "val"}, {"label" : "getOrElse", "tail" : "(default: T)(arg0: ClassTag[T]): T", "member" : "io.github.hamsters.Union.getOrElse", "link" : "io\/github\/hamsters\/Union4.html#getOrElse[T](default:T)(implicitevidence$4:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: ClassTag[T]): Option[T]", "member" : "io.github.hamsters.Union.get", "link" : "io\/github\/hamsters\/Union4.html#get[T](implicitevidence$3:scala.reflect.ClassTag[T]):Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union4.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union4.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union4.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union4.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union4.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union4.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union4.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union4.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union4.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union4.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union4.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union4.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union4.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union4.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union4.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union4.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/Union4.html", "kind" : "case class"}, {"name" : "io.github.hamsters.Union4Type", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union4Type.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union4Type.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union4Type[T1, T2, T3, T4]) ⇒ Boolean, msg: ⇒ Any): Union4Type[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4Type.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union4Type[T1, T2, T3, T4]) ⇒ Boolean): Union4Type[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4Type.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union4Type[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4Type.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union4Type[T1, T2, T3, T4]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union4Type.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union4Type[T1, T2, T3, T4], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union4Type.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union4Type[T1, T2, T3, T4], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union4Type.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union4Type#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union4Type.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union4Type.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union4Type.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union4Type.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union4Type.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union4Type.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union4Type.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union4Type.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union4Type.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union4Type.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union4Type.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union4Type.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Union4Type.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union4Type.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Union4Type.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Union4Type.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union4Type.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union4Type.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union4Type.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/Union4Type.html", "kind" : "class"}, {"name" : "io.github.hamsters.Union5", "shortDescription" : "", "members_case class" : [{"label" : "noEraseInstanceOf", "tail" : "(arg0: ClassTag[T]): Boolean", "member" : "io.github.hamsters.Union.NoEraseInstanceOf.noEraseInstanceOf", "link" : "io\/github\/hamsters\/Union5.html#noEraseInstanceOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union5.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union5.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union5[T1, T2, T3, T4, T5]) ⇒ Boolean, msg: ⇒ Any): Union5[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union5[T1, T2, T3, T4, T5]) ⇒ Boolean): Union5[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union5[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union5[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union5[T1, T2, T3, T4, T5], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union5.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union5[T1, T2, T3, T4, T5], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union5.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union5#<init>", "error" : "unsupported entity"}, {"label" : "v5", "tail" : ": Option[T5]", "member" : "io.github.hamsters.Union5.v5", "link" : "io\/github\/hamsters\/Union5.html#v5:Option[T5]", "kind" : "val"}, {"label" : "v4", "tail" : ": Option[T4]", "member" : "io.github.hamsters.Union5.v4", "link" : "io\/github\/hamsters\/Union5.html#v4:Option[T4]", "kind" : "val"}, {"label" : "v3", "tail" : ": Option[T3]", "member" : "io.github.hamsters.Union5.v3", "link" : "io\/github\/hamsters\/Union5.html#v3:Option[T3]", "kind" : "val"}, {"label" : "v2", "tail" : ": Option[T2]", "member" : "io.github.hamsters.Union5.v2", "link" : "io\/github\/hamsters\/Union5.html#v2:Option[T2]", "kind" : "val"}, {"label" : "v1", "tail" : ": Option[T1]", "member" : "io.github.hamsters.Union5.v1", "link" : "io\/github\/hamsters\/Union5.html#v1:Option[T1]", "kind" : "val"}, {"label" : "getOrElse", "tail" : "(default: T)(arg0: ClassTag[T]): T", "member" : "io.github.hamsters.Union.getOrElse", "link" : "io\/github\/hamsters\/Union5.html#getOrElse[T](default:T)(implicitevidence$4:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: ClassTag[T]): Option[T]", "member" : "io.github.hamsters.Union.get", "link" : "io\/github\/hamsters\/Union5.html#get[T](implicitevidence$3:scala.reflect.ClassTag[T]):Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union5.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union5.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union5.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union5.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union5.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union5.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union5.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union5.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union5.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union5.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union5.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union5.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union5.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union5.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union5.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union5.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/Union5.html", "kind" : "case class"}, {"name" : "io.github.hamsters.Union5Type", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union5Type.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union5Type.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union5Type[T1, T2, T3, T4, T5]) ⇒ Boolean, msg: ⇒ Any): Union5Type[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5Type.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union5Type[T1, T2, T3, T4, T5]) ⇒ Boolean): Union5Type[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5Type.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union5Type[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5Type.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union5Type[T1, T2, T3, T4, T5]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union5Type.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union5Type[T1, T2, T3, T4, T5], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union5Type.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union5Type[T1, T2, T3, T4, T5], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union5Type.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union5Type#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union5Type.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union5Type.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union5Type.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union5Type.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union5Type.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union5Type.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union5Type.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union5Type.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union5Type.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union5Type.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union5Type.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union5Type.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Union5Type.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union5Type.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Union5Type.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Union5Type.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union5Type.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union5Type.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union5Type.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/Union5Type.html", "kind" : "class"}, {"name" : "io.github.hamsters.Union6", "shortDescription" : "", "members_case class" : [{"label" : "noEraseInstanceOf", "tail" : "(arg0: ClassTag[T]): Boolean", "member" : "io.github.hamsters.Union.NoEraseInstanceOf.noEraseInstanceOf", "link" : "io\/github\/hamsters\/Union6.html#noEraseInstanceOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union6.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union6.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union6[T1, T2, T3, T4, T5, T6]) ⇒ Boolean, msg: ⇒ Any): Union6[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union6[T1, T2, T3, T4, T5, T6]) ⇒ Boolean): Union6[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union6[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union6[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union6[T1, T2, T3, T4, T5, T6], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union6.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union6[T1, T2, T3, T4, T5, T6], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union6.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union6#<init>", "error" : "unsupported entity"}, {"label" : "v6", "tail" : ": Option[T6]", "member" : "io.github.hamsters.Union6.v6", "link" : "io\/github\/hamsters\/Union6.html#v6:Option[T6]", "kind" : "val"}, {"label" : "v5", "tail" : ": Option[T5]", "member" : "io.github.hamsters.Union6.v5", "link" : "io\/github\/hamsters\/Union6.html#v5:Option[T5]", "kind" : "val"}, {"label" : "v4", "tail" : ": Option[T4]", "member" : "io.github.hamsters.Union6.v4", "link" : "io\/github\/hamsters\/Union6.html#v4:Option[T4]", "kind" : "val"}, {"label" : "v3", "tail" : ": Option[T3]", "member" : "io.github.hamsters.Union6.v3", "link" : "io\/github\/hamsters\/Union6.html#v3:Option[T3]", "kind" : "val"}, {"label" : "v2", "tail" : ": Option[T2]", "member" : "io.github.hamsters.Union6.v2", "link" : "io\/github\/hamsters\/Union6.html#v2:Option[T2]", "kind" : "val"}, {"label" : "v1", "tail" : ": Option[T1]", "member" : "io.github.hamsters.Union6.v1", "link" : "io\/github\/hamsters\/Union6.html#v1:Option[T1]", "kind" : "val"}, {"label" : "getOrElse", "tail" : "(default: T)(arg0: ClassTag[T]): T", "member" : "io.github.hamsters.Union.getOrElse", "link" : "io\/github\/hamsters\/Union6.html#getOrElse[T](default:T)(implicitevidence$4:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: ClassTag[T]): Option[T]", "member" : "io.github.hamsters.Union.get", "link" : "io\/github\/hamsters\/Union6.html#get[T](implicitevidence$3:scala.reflect.ClassTag[T]):Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union6.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union6.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union6.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union6.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union6.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union6.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union6.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union6.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union6.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union6.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union6.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union6.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union6.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union6.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union6.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union6.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/Union6.html", "kind" : "case class"}, {"name" : "io.github.hamsters.Union6Type", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union6Type.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union6Type.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union6Type[T1, T2, T3, T4, T5, T6]) ⇒ Boolean, msg: ⇒ Any): Union6Type[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6Type.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union6Type[T1, T2, T3, T4, T5, T6]) ⇒ Boolean): Union6Type[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6Type.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union6Type[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6Type.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union6Type[T1, T2, T3, T4, T5, T6]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union6Type.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union6Type[T1, T2, T3, T4, T5, T6], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union6Type.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union6Type[T1, T2, T3, T4, T5, T6], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union6Type.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union6Type#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union6Type.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union6Type.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union6Type.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union6Type.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union6Type.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union6Type.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union6Type.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union6Type.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union6Type.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union6Type.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union6Type.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union6Type.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Union6Type.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union6Type.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Union6Type.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Union6Type.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union6Type.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union6Type.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union6Type.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/Union6Type.html", "kind" : "class"}, {"name" : "io.github.hamsters.Union7", "shortDescription" : "", "members_case class" : [{"label" : "noEraseInstanceOf", "tail" : "(arg0: ClassTag[T]): Boolean", "member" : "io.github.hamsters.Union.NoEraseInstanceOf.noEraseInstanceOf", "link" : "io\/github\/hamsters\/Union7.html#noEraseInstanceOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union7.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union7.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union7[T1, T2, T3, T4, T5, T6, T7]) ⇒ Boolean, msg: ⇒ Any): Union7[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union7[T1, T2, T3, T4, T5, T6, T7]) ⇒ Boolean): Union7[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union7[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union7[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union7[T1, T2, T3, T4, T5, T6, T7], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union7.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union7[T1, T2, T3, T4, T5, T6, T7], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union7.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union7#<init>", "error" : "unsupported entity"}, {"label" : "v7", "tail" : ": Option[T7]", "member" : "io.github.hamsters.Union7.v7", "link" : "io\/github\/hamsters\/Union7.html#v7:Option[T7]", "kind" : "val"}, {"label" : "v6", "tail" : ": Option[T6]", "member" : "io.github.hamsters.Union7.v6", "link" : "io\/github\/hamsters\/Union7.html#v6:Option[T6]", "kind" : "val"}, {"label" : "v5", "tail" : ": Option[T5]", "member" : "io.github.hamsters.Union7.v5", "link" : "io\/github\/hamsters\/Union7.html#v5:Option[T5]", "kind" : "val"}, {"label" : "v4", "tail" : ": Option[T4]", "member" : "io.github.hamsters.Union7.v4", "link" : "io\/github\/hamsters\/Union7.html#v4:Option[T4]", "kind" : "val"}, {"label" : "v3", "tail" : ": Option[T3]", "member" : "io.github.hamsters.Union7.v3", "link" : "io\/github\/hamsters\/Union7.html#v3:Option[T3]", "kind" : "val"}, {"label" : "v2", "tail" : ": Option[T2]", "member" : "io.github.hamsters.Union7.v2", "link" : "io\/github\/hamsters\/Union7.html#v2:Option[T2]", "kind" : "val"}, {"label" : "v1", "tail" : ": Option[T1]", "member" : "io.github.hamsters.Union7.v1", "link" : "io\/github\/hamsters\/Union7.html#v1:Option[T1]", "kind" : "val"}, {"label" : "getOrElse", "tail" : "(default: T)(arg0: ClassTag[T]): T", "member" : "io.github.hamsters.Union.getOrElse", "link" : "io\/github\/hamsters\/Union7.html#getOrElse[T](default:T)(implicitevidence$4:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: ClassTag[T]): Option[T]", "member" : "io.github.hamsters.Union.get", "link" : "io\/github\/hamsters\/Union7.html#get[T](implicitevidence$3:scala.reflect.ClassTag[T]):Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union7.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union7.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union7.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union7.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union7.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union7.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union7.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union7.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union7.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union7.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union7.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union7.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union7.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union7.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union7.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union7.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/hamsters\/Union7.html", "kind" : "case class"}, {"name" : "io.github.hamsters.Union7Type", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/github\/hamsters\/Union7Type.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/github\/hamsters\/Union7Type.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union7Type[T1, T2, T3, T4, T5, T6, T7]) ⇒ Boolean, msg: ⇒ Any): Union7Type[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7Type.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Union7Type[T1, T2, T3, T4, T5, T6, T7]) ⇒ Boolean): Union7Type[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7Type.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Union7Type[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7Type.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Union7Type[T1, T2, T3, T4, T5, T6, T7]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/github\/hamsters\/Union7Type.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Union7Type[T1, T2, T3, T4, T5, T6, T7], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/github\/hamsters\/Union7Type.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Union7Type[T1, T2, T3, T4, T5, T6, T7], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/github\/hamsters\/Union7Type.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.github.hamsters.Union7Type#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Union7Type.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Union7Type.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Union7Type.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Union7Type.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Union7Type.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Union7Type.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Union7Type.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union7Type.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union7Type.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Union7Type.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Union7Type.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Union7Type.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Union7Type.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Union7Type.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Union7Type.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Union7Type.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Union7Type.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Union7Type.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Union7Type.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/hamsters\/Union7Type.html", "kind" : "class"}, {"name" : "io.github.hamsters.Validation", "shortDescription" : "", "object" : "io\/github\/hamsters\/Validation$.html", "members_object" : [{"label" : "OKBiasedEither", "tail" : "", "member" : "io.github.hamsters.Validation.OKBiasedEither", "link" : "io\/github\/hamsters\/Validation$.html#OKBiasedEither[L,R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "hasFailures", "tail" : "(eithers: Either[L, _]*): Boolean", "member" : "io.github.hamsters.Validation.hasFailures", "link" : "io\/github\/hamsters\/Validation$.html#hasFailures[L](eithers:Either[L,_]*):Boolean", "kind" : "def"}, {"label" : "failures", "tail" : "(eithers: Either[L, _]*): List[L]", "member" : "io.github.hamsters.Validation.failures", "link" : "io\/github\/hamsters\/Validation$.html#failures[L](eithers:Either[L,_]*):List[L]", "kind" : "def"}, {"label" : "run", "tail" : "(e1: Either[L, R1], e2: Either[L, R2], e3: Either[L, R3]): Either[List[L], (R1, R2, R3)]", "member" : "io.github.hamsters.Validation.run", "link" : "io\/github\/hamsters\/Validation$.html#run[L,R1,R2,R3](e1:Either[L,R1],e2:Either[L,R2],e3:Either[L,R3]):Either[List[L],(R1,R2,R3)]", "kind" : "def"}, {"label" : "run", "tail" : "(e1: Either[L, R1], e2: Either[L, R2]): Either[List[L], (R1, R2)]", "member" : "io.github.hamsters.Validation.run", "link" : "io\/github\/hamsters\/Validation$.html#run[L,R1,R2](e1:Either[L,R1],e2:Either[L,R2]):Either[List[L],(R1,R2)]", "kind" : "def"}, {"label" : "hasSuccesses", "tail" : "(eithers: Either[_, R]*): Boolean", "member" : "io.github.hamsters.Validation.hasSuccesses", "link" : "io\/github\/hamsters\/Validation$.html#hasSuccesses[R](eithers:Either[_,R]*):Boolean", "kind" : "def"}, {"label" : "successes", "tail" : "(eithers: Either[_, _]*): List[Any]", "member" : "io.github.hamsters.Validation.successes", "link" : "io\/github\/hamsters\/Validation$.html#successes(eithers:Either[_,_]*):List[Any]", "kind" : "def"}, {"label" : "fromCatchable", "tail" : "(body: ⇒ R, errorMgt: (Throwable) ⇒ L): Either[L, R]", "member" : "io.github.hamsters.Validation.fromCatchable", "link" : "io\/github\/hamsters\/Validation$.html#fromCatchable[L,R](body:=>R,errorMgt:Throwable=>L):Either[L,R]", "kind" : "def"}, {"label" : "fromCatchable", "tail" : "(body: ⇒ R): Either[String, R]", "member" : "io.github.hamsters.Validation.fromCatchable", "link" : "io\/github\/hamsters\/Validation$.html#fromCatchable[R](body:=>R):Either[String,R]", "kind" : "def"}, {"label" : "KO", "tail" : ": Left.type", "member" : "io.github.hamsters.Validation.KO", "link" : "io\/github\/hamsters\/Validation$.html#KO:scala.util.Left.type", "kind" : "val"}, {"label" : "OK", "tail" : ": Right.type", "member" : "io.github.hamsters.Validation.OK", "link" : "io\/github\/hamsters\/Validation$.html#OK:scala.util.Right.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/hamsters\/Validation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/hamsters\/Validation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/hamsters\/Validation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/hamsters\/Validation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/hamsters\/Validation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/hamsters\/Validation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/hamsters\/Validation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Validation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Validation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/hamsters\/Validation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/hamsters\/Validation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/hamsters\/Validation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/hamsters\/Validation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/hamsters\/Validation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/hamsters\/Validation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/hamsters\/Validation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/hamsters\/Validation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/hamsters\/Validation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/hamsters\/Validation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scala.meta.parsers" : [], "scala.meta.transversers" : [], "scala.meta.prettyprinters" : [], "scala" : [], "io.github" : [], "scala.meta.semantic" : [], "scala.meta.tokenizers" : [], "io" : [], "scala.meta.quasiquotes" : [], "scala.meta" : []};